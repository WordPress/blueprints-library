<?php
/**
 * @file AUTOGENERATED FILE â€“ DO NOT CHANGE MANUALLY
 * All your changes will get overridden. See the README for more details.
 */

namespace WordPress\Blueprints\Model\Dirty;

use Swaggest\JsonSchema\Constraint\Properties;
use Swaggest\JsonSchema\Schema;
use Swaggest\JsonSchema\Structure\ClassStructure;
use Swaggest\JsonSchema\Structure\ClassStructureContract;


/**
 * Built from #/definitions/WriteFileStep
 */
class WriteFileStep extends ClassStructure implements ClassStructureContract
{
    use \Swaggest\JsonSchema\Structure\ClassStructureTrait;

    const SLUG = 'writeFile';

    /** @var Progress */
    public $progress;

    /** @var bool */
    public $continueOnError = false;

    /** @var string */
    public $step = 'writeFile';

    /** @var string The path of the file to write to */
    public $path;

    /** @var string|FilesystemResource|InlineResource|CoreThemeResource|CorePluginResource|UrlResource|string The data to write */
    public $data;

    /**
     * @param Properties|static $properties
     * @param Schema $ownerSchema
     */
    public static function setUpProperties($properties, Schema $ownerSchema)
    {
        $properties->progress = Progress::schema();
        $properties->continueOnError = Schema::boolean();
        $properties->continueOnError->default = false;
        $properties->step = Schema::string();
        $properties->step->const = "writeFile";
        $properties->path = Schema::string();
        $properties->path->description = "The path of the file to write to";
        $properties->data = new Schema();
        $propertiesDataAnyOf0 = new Schema();
        $propertiesDataAnyOf0->anyOf[0] = Schema::string();
        $propertiesDataAnyOf0->anyOf[1] = FilesystemResource::schema();
        $propertiesDataAnyOf0->anyOf[2] = InlineResource::schema();
        $propertiesDataAnyOf0->anyOf[3] = CoreThemeResource::schema();
        $propertiesDataAnyOf0->anyOf[4] = CorePluginResource::schema();
        $propertiesDataAnyOf0->anyOf[5] = UrlResource::schema();
        $propertiesDataAnyOf0->setFromRef('#/definitions/FileReference');
        $properties->data->anyOf[0] = $propertiesDataAnyOf0;
        $properties->data->anyOf[1] = Schema::string();
        $properties->data->description = "The data to write";
        $ownerSchema->type = Schema::OBJECT;
        $ownerSchema->additionalProperties = false;
        $ownerSchema->required = array(
            self::names()->data,
            self::names()->path,
            self::names()->step,
        );
        $ownerSchema->setFromRef('#/definitions/WriteFileStep');
    }

    /**
     * @param Progress $progress
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setProgress(Progress $progress)
    {
        $this->progress = $progress;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param bool $continueOnError
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setContinueOnError($continueOnError)
    {
        $this->continueOnError = $continueOnError;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param string $step
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setStep($step)
    {
        $this->step = $step;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param string $path The path of the file to write to
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setPath($path)
    {
        $this->path = $path;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param string|FilesystemResource|InlineResource|CoreThemeResource|CorePluginResource|UrlResource|string $data The data to write
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setData($data)
    {
        $this->data = $data;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    static function create()
    {
        return new static();
    }

    function normalize()
    {
        return new \WordPress\Blueprints\Model\InternalValidated\ValidWriteFileStep(
        $this->path,
        $this->data,
        $this->progress,
        $this->continueOnError
        );
    }

    /**
     * @param mixed $objectMaybe
     */
    private function recursiveJsonSerialize($objectMaybe)
    {
        if ( is_array( $objectMaybe ) ) {
        	return array_map([$this, 'recursiveJsonSerialize'], $objectMaybe);
        } elseif ( $objectMaybe instanceof \Swaggest\JsonSchema\Structure\ClassStructureContract ) {
        	return $objectMaybe->normalize();
        } else {
        	return $objectMaybe;
        }
    }
}