<?php
/**
 * @file AUTOGENERATED FILE â€“ DO NOT CHANGE MANUALLY
 * All your changes will get overridden. See the README for more details.
 */

namespace WordPress\Blueprints\Model\Dirty;

use Swaggest\JsonSchema\Constraint\Properties;
use Swaggest\JsonSchema\Schema;
use Swaggest\JsonSchema\Structure\ClassStructure;
use Swaggest\JsonSchema\Structure\ClassStructureContract;


/**
 * Built from #/definitions/FilesystemResource
 */
class FilesystemResource extends ClassStructure implements ClassStructureContract
{
    use \Swaggest\JsonSchema\Structure\ClassStructureTrait;

    const SLUG = 'filesystem';

    /** @var string Identifies the file resource as Virtual File System (VFS) */
    public $resource = 'filesystem';

    /** @var string The path to the file in the VFS */
    public $path;

    /**
     * @param Properties|static $properties
     * @param Schema $ownerSchema
     */
    public static function setUpProperties($properties, Schema $ownerSchema)
    {
        $properties->resource = Schema::string();
        $properties->resource->description = "Identifies the file resource as Virtual File System (VFS)";
        $properties->resource->const = "filesystem";
        $properties->path = Schema::string();
        $properties->path->description = "The path to the file in the VFS";
        $ownerSchema->type = Schema::OBJECT;
        $ownerSchema->additionalProperties = false;
        $ownerSchema->required = array(
            self::names()->resource,
            self::names()->path,
        );
        $ownerSchema->setFromRef('#/definitions/FilesystemResource');
    }

    /**
     * @param string $resource Identifies the file resource as Virtual File System (VFS)
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setResource($resource)
    {
        $this->resource = $resource;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param string $path The path to the file in the VFS
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setPath($path)
    {
        $this->path = $path;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    static function create()
    {
        return new static();
    }

    function normalize()
    {
        return new \WordPress\Blueprints\Model\InternalValidated\ValidFilesystemResource(
        $this->path
        );
    }

    /**
     * @param mixed $objectMaybe
     */
    private function recursiveJsonSerialize($objectMaybe)
    {
        if ( is_array( $objectMaybe ) ) {
        	return array_map([$this, 'recursiveJsonSerialize'], $objectMaybe);
        } elseif ( $objectMaybe instanceof \Swaggest\JsonSchema\Structure\ClassStructureContract ) {
        	return $objectMaybe->normalize();
        } else {
        	return $objectMaybe;
        }
    }
}