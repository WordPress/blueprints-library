<?php
/**
 * @file AUTOGENERATED FILE – DO NOT CHANGE MANUALLY
 * All your changes will get overridden. See the README for more details.
 */

namespace WordPress\Blueprints\Model\Dirty;

use Swaggest\JsonSchema\Constraint\Properties;
use Swaggest\JsonSchema\Schema;
use Swaggest\JsonSchema\Structure\ClassStructure;
use Swaggest\JsonSchema\Structure\ClassStructureContract;


/**
 * Built from #/definitions/Blueprint
 */
class Blueprint extends ClassStructure implements ClassStructureContract
{
    use \Swaggest\JsonSchema\Structure\ClassStructureTrait;

    /** @var string Optional description. It doesn't do anything but is exposed as a courtesy to developers who may want to document which blueprint file does what. */
    public $description;

    /** @var mixed Slot for runtime–specific options, schema must be provided by the runtime. */
    public $runtime;

    /** @var BlueprintOnBoot */
    public $onBoot;

    /** @var string The preferred WordPress version to use. If not specified, the latest supported version will be used */
    public $wpVersion;

    /** @var string[]|float[]|bool[] PHP Constants to define on every request */
    public $constants;

    /** @var string[]|FilesystemResource[]|InlineResource[]|CoreThemeResource[]|CorePluginResource[]|UrlResource[]|array WordPress plugins to install and activate */
    public $plugins = [];

    /** @var string[] WordPress site options to define */
    public $siteOptions;

    /** @var ActivatePluginStep[]|ActivateThemeStep[]|CpStep[]|DefineWpConfigConstsStep[]|DefineSiteUrlStep[]|EnableMultisiteStep[]|EvalPHPCallbackStep[]|ImportFileStep[]|InstallPluginStep[]|InstallThemeStep[]|MkdirStep[]|MvStep[]|RmStep[]|RmDirStep[]|RunPHPStep[]|RunWordPressInstallerStep[]|RunSQLStep[]|SetSiteOptionsStep[]|UnzipStep[]|DownloadWordPressStep[]|InstallSqliteIntegrationStep[]|WriteFileStep[]|WPCLIStep[]|array The steps to run after every other operation in this Blueprint was executed. */
    public $steps = [];

    /**
     * @param Properties|static $properties
     * @param Schema $ownerSchema
     */
    public static function setUpProperties($properties, Schema $ownerSchema)
    {
        $properties->description = Schema::string();
        $properties->description->description = "Optional description. It doesn't do anything but is exposed as a courtesy to developers who may want to document which blueprint file does what.";
        $properties->runtime = Schema::object();
        $properties->runtime->additionalProperties = true;
        $properties->runtime->description = "Slot for runtime–specific options, schema must be provided by the runtime.";
        $properties->onBoot = BlueprintOnBoot::schema();
        $properties->wpVersion = Schema::string();
        $properties->wpVersion->description = "The preferred WordPress version to use. If not specified, the latest supported version will be used";
        $properties->constants = Schema::object();
        $properties->constants->additionalProperties = new Schema();
        $properties->constants->additionalProperties->anyOf[0] = Schema::string();
        $properties->constants->additionalProperties->anyOf[1] = Schema::number();
        $properties->constants->additionalProperties->anyOf[2] = Schema::boolean();
        $properties->constants->description = "PHP Constants to define on every request";
        $properties->constants->default = (object)[];
        $properties->plugins = Schema::arr();
        $properties->plugins->items = new Schema();
        $properties->plugins->items->anyOf[0] = Schema::string();
        $properties->plugins->items->anyOf[1] = FilesystemResource::schema();
        $properties->plugins->items->anyOf[2] = InlineResource::schema();
        $properties->plugins->items->anyOf[3] = CoreThemeResource::schema();
        $properties->plugins->items->anyOf[4] = CorePluginResource::schema();
        $properties->plugins->items->anyOf[5] = UrlResource::schema();
        $properties->plugins->items->setFromRef('#/definitions/FileReference');
        $properties->plugins->description = "WordPress plugins to install and activate";
        $properties->plugins->default = [];
        $properties->siteOptions = Schema::object();
        $properties->siteOptions->additionalProperties = Schema::string();
        $properties->siteOptions->description = "WordPress site options to define";
        $properties->siteOptions->default = (object)[];
        $properties->steps = Schema::arr();
        $properties->steps->items = Schema::object();
        $properties->steps->items->oneOf[0] = ActivatePluginStep::schema();
        $properties->steps->items->oneOf[1] = ActivateThemeStep::schema();
        $properties->steps->items->oneOf[2] = CpStep::schema();
        $properties->steps->items->oneOf[3] = DefineWpConfigConstsStep::schema();
        $properties->steps->items->oneOf[4] = DefineSiteUrlStep::schema();
        $properties->steps->items->oneOf[5] = EnableMultisiteStep::schema();
        $properties->steps->items->oneOf[6] = EvalPHPCallbackStep::schema();
        $properties->steps->items->oneOf[7] = ImportFileStep::schema();
        $properties->steps->items->oneOf[8] = InstallPluginStep::schema();
        $properties->steps->items->oneOf[9] = InstallThemeStep::schema();
        $properties->steps->items->oneOf[10] = MkdirStep::schema();
        $properties->steps->items->oneOf[11] = MvStep::schema();
        $properties->steps->items->oneOf[12] = RmStep::schema();
        $properties->steps->items->oneOf[13] = RmDirStep::schema();
        $properties->steps->items->oneOf[14] = RunPHPStep::schema();
        $properties->steps->items->oneOf[15] = RunWordPressInstallerStep::schema();
        $properties->steps->items->oneOf[16] = RunSQLStep::schema();
        $properties->steps->items->oneOf[17] = SetSiteOptionsStep::schema();
        $properties->steps->items->oneOf[18] = UnzipStep::schema();
        $properties->steps->items->oneOf[19] = DownloadWordPressStep::schema();
        $properties->steps->items->oneOf[20] = InstallSqliteIntegrationStep::schema();
        $properties->steps->items->oneOf[21] = WriteFileStep::schema();
        $properties->steps->items->oneOf[22] = WPCLIStep::schema();
        $properties->steps->items->required = array(
            self::names()->step,
        );
        $properties->steps->items->setFromRef('#/definitions/StepDefinition');
        $properties->steps->description = "The steps to run after every other operation in this Blueprint was executed.";
        $properties->steps->default = [];
        $ownerSchema->type = Schema::OBJECT;
        $ownerSchema->additionalProperties = false;
        $ownerSchema->setFromRef('#/definitions/Blueprint');
    }

    /**
     * @param string $description Optional description. It doesn't do anything but is exposed as a courtesy to developers who may want to document which blueprint file does what.
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setDescription($description)
    {
        $this->description = $description;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param mixed $runtime Slot for runtime–specific options, schema must be provided by the runtime.
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setRuntime($runtime)
    {
        $this->runtime = $runtime;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param BlueprintOnBoot $onBoot
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setOnBoot(BlueprintOnBoot $onBoot)
    {
        $this->onBoot = $onBoot;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param string $wpVersion The preferred WordPress version to use. If not specified, the latest supported version will be used
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setWpVersion($wpVersion)
    {
        $this->wpVersion = $wpVersion;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param string[]|float[]|bool[] $constants PHP Constants to define on every request
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setConstants($constants)
    {
        $this->constants = $constants;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param string[]|FilesystemResource[]|InlineResource[]|CoreThemeResource[]|CorePluginResource[]|UrlResource[]|array $plugins WordPress plugins to install and activate
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setPlugins($plugins)
    {
        $this->plugins = $plugins;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param string[] $siteOptions WordPress site options to define
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setSiteOptions($siteOptions)
    {
        $this->siteOptions = $siteOptions;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param ActivatePluginStep[]|ActivateThemeStep[]|CpStep[]|DefineWpConfigConstsStep[]|DefineSiteUrlStep[]|EnableMultisiteStep[]|EvalPHPCallbackStep[]|ImportFileStep[]|InstallPluginStep[]|InstallThemeStep[]|MkdirStep[]|MvStep[]|RmStep[]|RmDirStep[]|RunPHPStep[]|RunWordPressInstallerStep[]|RunSQLStep[]|SetSiteOptionsStep[]|UnzipStep[]|DownloadWordPressStep[]|InstallSqliteIntegrationStep[]|WriteFileStep[]|WPCLIStep[]|array $steps The steps to run after every other operation in this Blueprint was executed.
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setSteps($steps)
    {
        $this->steps = $steps;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    static function create()
    {
        return new static();
    }

    function normalize()
    {
        return new \WordPress\Blueprints\Model\InternalValidated\ValidBlueprint(
        $this->description,
        $this->runtime,
        $this->onBoot,
        $this->wpVersion,
        $this->constants,
        $this->plugins,
        $this->siteOptions,
        $this->steps
        );
    }

    /**
     * @param mixed $objectMaybe
     */
    private function recursiveJsonSerialize($objectMaybe)
    {
        if ( is_array( $objectMaybe ) ) {
        	return array_map([$this, 'recursiveJsonSerialize'], $objectMaybe);
        } elseif ( $objectMaybe instanceof \Swaggest\JsonSchema\Structure\ClassStructureContract ) {
        	return $objectMaybe->normalize();
        } else {
        	return $objectMaybe;
        }
    }
}