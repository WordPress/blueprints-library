<?php
/**
 * @file AUTOGENERATED FILE – DO NOT CHANGE MANUALLY
 * All your changes will get overridden. See the README for more details.
 */

namespace WordPress\Blueprints\Model\Builder;

use Swaggest\JsonSchema\Constraint\Properties;
use Swaggest\JsonSchema\Schema;
use WordPress\Blueprints\Model\DataClass\Blueprint;
use Swaggest\JsonSchema\Structure\ClassStructureContract;


/**
 * Built from #/definitions/Blueprint
 */
class BlueprintBuilder extends Blueprint implements ClassStructureContract
{
    use \Swaggest\JsonSchema\Structure\ClassStructureTrait;

    /**
     * @param Properties|static $properties
     * @param Schema $ownerSchema
     */
    public static function setUpProperties($properties, Schema $ownerSchema)
    {
        $properties->description = Schema::string();
        $properties->description->description = "Optional description. It doesn't do anything but is exposed as a courtesy to developers who may want to document which blueprint file does what.";
        $properties->runtime = Schema::object();
        $properties->runtime->additionalProperties = true;
        $properties->runtime->description = "Slot for runtime–specific options, schema must be provided by the runtime.";
        $properties->onBoot = BlueprintOnBootBuilder::schema();
        $properties->wpVersion = Schema::string();
        $properties->wpVersion->description = "The preferred WordPress version to use. If not specified, the latest supported version will be used";
        $properties->constants = Schema::object();
        $properties->constants->additionalProperties = new Schema();
        $properties->constants->additionalProperties->anyOf[0] = Schema::string();
        $properties->constants->additionalProperties->anyOf[1] = Schema::number();
        $properties->constants->additionalProperties->anyOf[2] = Schema::boolean();
        $properties->constants->description = "PHP Constants to define on every request";
        $properties->constants->default = (object)[];
        $properties->plugins = Schema::arr();
        $properties->plugins->items = new Schema();
        $properties->plugins->items->anyOf[0] = Schema::string();
        $properties->plugins->items->anyOf[1] = FilesystemResourceBuilder::schema();
        $properties->plugins->items->anyOf[2] = InlineResourceBuilder::schema();
        $properties->plugins->items->anyOf[3] = CoreThemeResourceBuilder::schema();
        $properties->plugins->items->anyOf[4] = CorePluginResourceBuilder::schema();
        $properties->plugins->items->anyOf[5] = UrlResourceBuilder::schema();
        $properties->plugins->items->setFromRef('#/definitions/FileReference');
        $properties->plugins->description = "WordPress plugins to install and activate";
        $properties->plugins->default = [];
        $properties->siteOptions = Schema::object();
        $properties->siteOptions->additionalProperties = Schema::string();
        $properties->siteOptions->description = "WordPress site options to define";
        $properties->siteOptions->default = (object)[];
        $properties->steps = Schema::arr();
        $properties->steps->items = Schema::object();
        $properties->steps->items->oneOf[0] = ActivatePluginStepBuilder::schema();
        $properties->steps->items->oneOf[1] = ActivateThemeStepBuilder::schema();
        $properties->steps->items->oneOf[2] = CpStepBuilder::schema();
        $properties->steps->items->oneOf[3] = DefineWpConfigConstsStepBuilder::schema();
        $properties->steps->items->oneOf[4] = DefineSiteUrlStepBuilder::schema();
        $properties->steps->items->oneOf[5] = EnableMultisiteStepBuilder::schema();
        $properties->steps->items->oneOf[6] = EvalPHPCallbackStepBuilder::schema();
        $properties->steps->items->oneOf[7] = ImportFileStepBuilder::schema();
        $properties->steps->items->oneOf[8] = InstallPluginStepBuilder::schema();
        $properties->steps->items->oneOf[9] = InstallThemeStepBuilder::schema();
        $properties->steps->items->oneOf[10] = MkdirStepBuilder::schema();
        $properties->steps->items->oneOf[11] = MvStepBuilder::schema();
        $properties->steps->items->oneOf[12] = RmStepBuilder::schema();
        $properties->steps->items->oneOf[13] = RmDirStepBuilder::schema();
        $properties->steps->items->oneOf[14] = RunPHPStepBuilder::schema();
        $properties->steps->items->oneOf[15] = RunWordPressInstallerStepBuilder::schema();
        $properties->steps->items->oneOf[16] = RunSQLStepBuilder::schema();
        $properties->steps->items->oneOf[17] = SetSiteOptionsStepBuilder::schema();
        $properties->steps->items->oneOf[18] = UnzipStepBuilder::schema();
        $properties->steps->items->oneOf[19] = DownloadWordPressStepBuilder::schema();
        $properties->steps->items->oneOf[20] = InstallSqliteIntegrationStepBuilder::schema();
        $properties->steps->items->oneOf[21] = WriteFileStepBuilder::schema();
        $properties->steps->items->oneOf[22] = WPCLIStepBuilder::schema();
        $properties->steps->items->required = array(
            self::names()->step,
        );
        $properties->steps->items->setFromRef('#/definitions/StepDefinition');
        $properties->steps->description = "The steps to run after every other operation in this Blueprint was executed.";
        $properties->steps->default = [];
        $properties->schema = Schema::string();
        $ownerSchema->addPropertyMapping('$schema', self::names()->schema);
        $ownerSchema->type = Schema::OBJECT;
        $ownerSchema->additionalProperties = false;
        $ownerSchema->setFromRef('#/definitions/Blueprint');
    }

    /**
     * @param string $description Optional description. It doesn't do anything but is exposed as a courtesy to developers who may want to document which blueprint file does what.
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setDescription($description)
    {
        $this->description = $description;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param mixed $runtime Slot for runtime–specific options, schema must be provided by the runtime.
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setRuntime($runtime)
    {
        $this->runtime = $runtime;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param BlueprintOnBootBuilder $onBoot
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setOnBoot(BlueprintOnBootBuilder $onBoot)
    {
        $this->onBoot = $onBoot;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param string $wpVersion The preferred WordPress version to use. If not specified, the latest supported version will be used
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setWpVersion($wpVersion)
    {
        $this->wpVersion = $wpVersion;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param string[]|float[]|bool[] $constants PHP Constants to define on every request
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setConstants($constants)
    {
        $this->constants = $constants;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param string[]|FilesystemResourceBuilder[]|InlineResourceBuilder[]|CoreThemeResourceBuilder[]|CorePluginResourceBuilder[]|UrlResourceBuilder[]|array $plugins WordPress plugins to install and activate
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setPlugins($plugins)
    {
        $this->plugins = $plugins;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param string[] $siteOptions WordPress site options to define
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setSiteOptions($siteOptions)
    {
        $this->siteOptions = $siteOptions;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param ActivatePluginStepBuilder[]|ActivateThemeStepBuilder[]|CpStepBuilder[]|DefineWpConfigConstsStepBuilder[]|DefineSiteUrlStepBuilder[]|EnableMultisiteStepBuilder[]|EvalPHPCallbackStepBuilder[]|ImportFileStepBuilder[]|InstallPluginStepBuilder[]|InstallThemeStepBuilder[]|MkdirStepBuilder[]|MvStepBuilder[]|RmStepBuilder[]|RmDirStepBuilder[]|RunPHPStepBuilder[]|RunWordPressInstallerStepBuilder[]|RunSQLStepBuilder[]|SetSiteOptionsStepBuilder[]|UnzipStepBuilder[]|DownloadWordPressStepBuilder[]|InstallSqliteIntegrationStepBuilder[]|WriteFileStepBuilder[]|WPCLIStepBuilder[]|array $steps The steps to run after every other operation in this Blueprint was executed.
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setSteps($steps)
    {
        $this->steps = $steps;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    /**
     * @param string $schema
     * @return $this
     * @codeCoverageIgnoreStart
     */
    public function setSchema($schema)
    {
        $this->schema = $schema;
        return $this;
    }
    /** @codeCoverageIgnoreEnd */

    function toDataObject()
    {
        $dataObject = new Blueprint();
        $dataObject->description = $this->recursiveJsonSerialize($this->description);
        $dataObject->runtime = $this->recursiveJsonSerialize($this->runtime);
        $dataObject->onBoot = $this->recursiveJsonSerialize($this->onBoot);
        $dataObject->wpVersion = $this->recursiveJsonSerialize($this->wpVersion);
        $dataObject->constants = $this->recursiveJsonSerialize($this->constants);
        $dataObject->plugins = $this->recursiveJsonSerialize($this->plugins);
        $dataObject->siteOptions = $this->recursiveJsonSerialize($this->siteOptions);
        $dataObject->steps = $this->recursiveJsonSerialize($this->steps);
        $dataObject->schema = $this->recursiveJsonSerialize($this->schema);
        return $dataObject;
    }

    /**
     * @param mixed $objectMaybe
     */
    private function recursiveJsonSerialize($objectMaybe)
    {
        if ( is_array( $objectMaybe ) ) {
        	return array_map([$this, 'recursiveJsonSerialize'], $objectMaybe);
        } elseif ( $objectMaybe instanceof \Swaggest\JsonSchema\Structure\ClassStructureContract ) {
        	return $objectMaybe->toDataObject();
        } else {
        	return $objectMaybe;
        }
    }
}